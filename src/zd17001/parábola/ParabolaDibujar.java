/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package zd17001.parábola;

import Clases.Relleno;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JColorChooser;
import javax.swing.JOptionPane;
import static zd17001.parábola.ParabolaDibujar.slidX;

/**
 *
 * @author jose_
 */
public class ParabolaDibujar extends javax.swing.JInternalFrame {

    /**
     * Creates new form ParabolaDibujar
     */
    //Variables de retorno
    Color color1, color2;
    String comboFig, nombre;
    //Variables locales
    int grosor = 10;
    int ParabolaX1;
    int ParabolaY1;
    int lin = 0;
    int borrarx, borrary;
    int elipseX1, elipseY1;
    int elipseX2;
    int elipseY2;
    static int slidX = 0, slidY = 0;
    float DeltaX, DeltaY, K;
    int Pasos;
    float Xincremento = 0;
    float Yincremento = 0;
    float X = 0;
    float Y = 0;
    int xp = 0, yp = 0;
    int a, b;
    int h, k, p = 5, op = 0, oa = 0, lim, limX;
    int ejecucion = 0;
    int caja1 = 0, caja2 = 0, mensaje = 0;
    boolean estadoLimpiar = false;
    String radio1, radio2;
    int dinamico = 0;
    String iconSel = "";
    ArrayList<Relleno> rellenos;
    Relleno relleno;
    JColorChooser ventanColor;

    public ParabolaDibujar(Color color1, Color color2, String comboFig, String nombre) {

        initComponents();
        setTitle(nombre);
        this.color1 = color1;
        this.color2 = color2;
        this.comboFig = comboFig;
        this.nombre = nombre;
        combo.setSelectedItem(comboFig);
        this.panelFig.setBackground(color2);
        this.panel.setBackground(color2);
        sliderPosX.disable();
        sliderPosY.disable();
        this.rbtHorizontal.setSelected(true);
        this.sliderRadio1.setVisible(false);
        this.sliderRadio2.setVisible(false);
        this.rbtNo.setSelected(true);
        lblZoom.setVisible(false);
        rellenos = new ArrayList();
        relleno = new Relleno();
        ventanColor = new JColorChooser();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        butOrientacion = new javax.swing.ButtonGroup();
        butRellenar = new javax.swing.ButtonGroup();
        butLat = new javax.swing.ButtonGroup();
        paneldd = new javax.swing.JPanel();
        txtB = new jtextfieldround.JTextFieldRound();
        lbl1 = new javax.swing.JLabel();
        rbtVertical = new javax.swing.JRadioButton();
        rbtHorizontal = new javax.swing.JRadioButton();
        lblOrientación = new javax.swing.JLabel();
        lblZoom1 = new javax.swing.JLabel();
        sliderSecciones = new javax.swing.JSlider();
        btnDibujar = new principal.MaterialButtomRectangle();
        lblOrientación1 = new javax.swing.JLabel();
        rbtNo = new javax.swing.JRadioButton();
        rbtSi = new javax.swing.JRadioButton();
        lblZoom = new javax.swing.JLabel();
        sliderRadio1 = new javax.swing.JSlider();
        sliderRadio2 = new javax.swing.JSlider();
        txtA = new jtextfieldround.JTextFieldRound();
        lbl5 = new javax.swing.JLabel();
        panel = new javax.swing.JPanel();
        sliderPosX = new javax.swing.JSlider();
        sliderPosY = new javax.swing.JSlider();
        panelFig = new javax.swing.JPanel();
        lblTitulo = new javax.swing.JLabel();
        combo = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        panelLeft = new javax.swing.JPanel();
        btnLimpiar = new keeptoo.KButton();
        btnCopiar = new keeptoo.KButton();
        btnFondo = new keeptoo.KButton();
        btnBorrar = new keeptoo.KButton();
        btnTrazo = new keeptoo.KButton();
        btnMover = new keeptoo.KButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setClosable(true);
        setTitle(getTitle());
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        paneldd.setBackground(new java.awt.Color(45, 54, 76));
        paneldd.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtB.setFont(new java.awt.Font("Microsoft Tai Le", 0, 12)); // NOI18N
        txtB.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtBKeyTyped(evt);
            }
        });
        txtB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBActionPerformed(evt);
            }
        });
        paneldd.add(txtB, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 10, 60, -1));

        lbl1.setFont(new java.awt.Font("Microsoft Tai Le", 1, 14)); // NOI18N
        lbl1.setForeground(new java.awt.Color(255, 255, 255));
        lbl1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl1.setText("Cruce en eje:");
        paneldd.add(lbl1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 20, -1, -1));

        rbtVertical.setBackground(new java.awt.Color(45, 54, 76));
        butOrientacion.add(rbtVertical);
        rbtVertical.setFont(new java.awt.Font("Microsoft Tai Le", 1, 11)); // NOI18N
        rbtVertical.setForeground(new java.awt.Color(255, 255, 255));
        rbtVertical.setText("Vertical");
        rbtVertical.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtVerticalActionPerformed(evt);
            }
        });
        paneldd.add(rbtVertical, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 60, -1, -1));

        rbtHorizontal.setBackground(new java.awt.Color(45, 54, 76));
        butOrientacion.add(rbtHorizontal);
        rbtHorizontal.setFont(new java.awt.Font("Microsoft Tai Le", 1, 11)); // NOI18N
        rbtHorizontal.setForeground(new java.awt.Color(255, 255, 255));
        rbtHorizontal.setText("Horizontal");
        rbtHorizontal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtHorizontalActionPerformed(evt);
            }
        });
        paneldd.add(rbtHorizontal, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 60, -1, -1));

        lblOrientación.setFont(new java.awt.Font("Microsoft Tai Le", 1, 14)); // NOI18N
        lblOrientación.setForeground(new java.awt.Color(255, 255, 255));
        lblOrientación.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblOrientación.setText("Orientación:");
        paneldd.add(lblOrientación, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 60, 110, -1));

        lblZoom1.setFont(new java.awt.Font("Microsoft Tai Le", 1, 14)); // NOI18N
        lblZoom1.setForeground(new java.awt.Color(255, 255, 255));
        lblZoom1.setText("Seccionar:");
        paneldd.add(lblZoom1, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 10, -1, -1));

        sliderSecciones.setBackground(new java.awt.Color(45, 54, 76));
        sliderSecciones.setForeground(new java.awt.Color(0, 204, 255));
        sliderSecciones.setMajorTickSpacing(10);
        sliderSecciones.setMinorTickSpacing(10);
        sliderSecciones.setOrientation(javax.swing.JSlider.VERTICAL);
        sliderSecciones.setPaintTicks(true);
        sliderSecciones.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                sliderSeccionesMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                sliderSeccionesMouseReleased(evt);
            }
        });
        paneldd.add(sliderSecciones, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 30, 20, 50));

        btnDibujar.setBackground(new java.awt.Color(255, 120, 0));
        btnDibujar.setForeground(new java.awt.Color(255, 255, 255));
        btnDibujar.setText("Dibujar");
        btnDibujar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDibujar.setFont(new java.awt.Font("Microsoft Tai Le", 1, 18)); // NOI18N
        btnDibujar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDibujarActionPerformed(evt);
            }
        });
        paneldd.add(btnDibujar, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 30, 190, 50));

        lblOrientación1.setFont(new java.awt.Font("Microsoft Tai Le", 1, 14)); // NOI18N
        lblOrientación1.setForeground(new java.awt.Color(255, 255, 255));
        lblOrientación1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblOrientación1.setText("¿Desea rellenar?");
        paneldd.add(lblOrientación1, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 20, -1, -1));

        rbtNo.setBackground(new java.awt.Color(45, 54, 76));
        butRellenar.add(rbtNo);
        rbtNo.setFont(new java.awt.Font("Microsoft Tai Le", 1, 11)); // NOI18N
        rbtNo.setForeground(new java.awt.Color(255, 255, 255));
        rbtNo.setText("No");
        rbtNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtNoActionPerformed(evt);
            }
        });
        paneldd.add(rbtNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 20, -1, -1));

        rbtSi.setBackground(new java.awt.Color(45, 54, 76));
        butRellenar.add(rbtSi);
        rbtSi.setFont(new java.awt.Font("Microsoft Tai Le", 1, 11)); // NOI18N
        rbtSi.setForeground(new java.awt.Color(255, 255, 255));
        rbtSi.setText("Sí");
        rbtSi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtSiActionPerformed(evt);
            }
        });
        paneldd.add(rbtSi, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 20, -1, -1));

        lblZoom.setFont(new java.awt.Font("Microsoft Tai Le", 1, 14)); // NOI18N
        lblZoom.setForeground(new java.awt.Color(255, 255, 255));
        lblZoom.setText("Radio:");
        paneldd.add(lblZoom, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 10, -1, -1));

        sliderRadio1.setBackground(new java.awt.Color(45, 54, 76));
        sliderRadio1.setForeground(new java.awt.Color(0, 204, 255));
        sliderRadio1.setMinorTickSpacing(10);
        sliderRadio1.setPaintTicks(true);
        sliderRadio1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                sliderRadio1MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                sliderRadio1MouseReleased(evt);
            }
        });
        paneldd.add(sliderRadio1, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 30, 150, 20));

        sliderRadio2.setBackground(new java.awt.Color(45, 54, 76));
        sliderRadio2.setForeground(new java.awt.Color(0, 204, 255));
        sliderRadio2.setMajorTickSpacing(10);
        sliderRadio2.setMinorTickSpacing(10);
        sliderRadio2.setPaintTicks(true);
        sliderRadio2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                sliderRadio2MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                sliderRadio2MouseReleased(evt);
            }
        });
        paneldd.add(sliderRadio2, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 60, 150, 20));

        txtA.setFont(new java.awt.Font("Microsoft Tai Le", 0, 12)); // NOI18N
        txtA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtAKeyTyped(evt);
            }
        });
        paneldd.add(txtA, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 50, 60, -1));

        lbl5.setFont(new java.awt.Font("Microsoft Tai Le", 1, 14)); // NOI18N
        lbl5.setForeground(new java.awt.Color(255, 255, 255));
        lbl5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl5.setText("Vértice:");
        paneldd.add(lbl5, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 60, 80, -1));

        getContentPane().add(paneldd, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 0, 1010, 100));

        panel.setBackground(new java.awt.Color(53, 63, 89));
        panel.setForeground(new java.awt.Color(255, 255, 255));
        panel.setAutoscrolls(true);
        panel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                panelMouseDragged(evt);
            }
        });
        panel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                panelMousePressed(evt);
            }
        });
        panel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        getContentPane().add(panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 110, 1180, 320));

        sliderPosX.setBackground(new java.awt.Color(0, 51, 51));
        sliderPosX.setFont(new java.awt.Font("Microsoft Tai Le", 0, 11)); // NOI18N
        sliderPosX.setForeground(new java.awt.Color(0, 51, 51));
        sliderPosX.setMajorTickSpacing(50);
        sliderPosX.setMaximum(1016);
        sliderPosX.setMinorTickSpacing(50);
        sliderPosX.setPaintLabels(true);
        sliderPosX.setPaintTicks(true);
        sliderPosX.setToolTipText("");
        sliderPosX.setValue(508);
        sliderPosX.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        sliderPosX.setFocusCycleRoot(true);
        sliderPosX.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderPosXStateChanged(evt);
            }
        });
        sliderPosX.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                sliderPosXMouseDragged(evt);
            }
        });
        sliderPosX.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sliderPosXMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                sliderPosXMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                sliderPosXMouseReleased(evt);
            }
        });
        getContentPane().add(sliderPosX, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 490, 610, 45));

        sliderPosY.setBackground(new java.awt.Color(0, 51, 51));
        sliderPosY.setFont(new java.awt.Font("Microsoft Tai Le", 0, 11)); // NOI18N
        sliderPosY.setForeground(new java.awt.Color(0, 51, 51));
        sliderPosY.setMajorTickSpacing(50);
        sliderPosY.setMaximum(372);
        sliderPosY.setMinorTickSpacing(50);
        sliderPosY.setOrientation(javax.swing.JSlider.VERTICAL);
        sliderPosY.setPaintLabels(true);
        sliderPosY.setPaintTicks(true);
        sliderPosY.setToolTipText("");
        sliderPosY.setValue(186);
        sliderPosY.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderPosYStateChanged(evt);
            }
        });
        sliderPosY.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                sliderPosYMouseDragged(evt);
            }
        });
        sliderPosY.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sliderPosYMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                sliderPosYMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                sliderPosYMouseReleased(evt);
            }
        });
        getContentPane().add(sliderPosY, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 490, 30, 60));

        panelFig.setBackground(new java.awt.Color(101, 52, 172));
        panelFig.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblTitulo.setFont(new java.awt.Font("Microsoft Tai Le", 1, 48)); // NOI18N
        lblTitulo.setForeground(new java.awt.Color(255, 255, 255));
        lblTitulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitulo.setText("Parábola");
        panelFig.add(lblTitulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 10, 263, 47));

        combo.setBackground(new java.awt.Color(45, 54, 76));
        combo.setFont(new java.awt.Font("Microsoft Tai Le", 0, 11)); // NOI18N
        combo.setForeground(new java.awt.Color(255, 255, 255));
        combo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Parábola", "Círculo", "Elipse", "Línea" }));
        combo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboItemStateChanged(evt);
            }
        });
        combo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboActionPerformed(evt);
            }
        });
        panelFig.add(combo, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 70, 80, 20));

        jLabel5.setFont(new java.awt.Font("Microsoft Tai Le", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Cambiar:");
        panelFig.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 70, -1, -1));

        getContentPane().add(panelFig, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 310, 100));

        panelLeft.setBackground(new java.awt.Color(45, 54, 76));
        panelLeft.setName("Herramientas"); // NOI18N
        panelLeft.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnLimpiar.setBackground(new java.awt.Color(45, 54, 76));
        btnLimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons8_trash_48px.png"))); // NOI18N
        btnLimpiar.setToolTipText("Limpiar todo");
        btnLimpiar.setAlignmentY(0.0F);
        btnLimpiar.setBorderPainted(false);
        butLat.add(btnLimpiar);
        btnLimpiar.setIconTextGap(5);
        btnLimpiar.setkAllowGradient(false);
        btnLimpiar.setkBackGroundColor(new java.awt.Color(45, 54, 76));
        btnLimpiar.setkBorderRadius(90);
        btnLimpiar.setkEndColor(new java.awt.Color(45, 54, 76));
        btnLimpiar.setkForeGround(new java.awt.Color(45, 54, 76));
        btnLimpiar.setkHoverColor(new java.awt.Color(68, 81, 114));
        btnLimpiar.setkHoverEndColor(new java.awt.Color(45, 54, 76));
        btnLimpiar.setkHoverForeGround(new java.awt.Color(45, 54, 76));
        btnLimpiar.setkHoverStartColor(new java.awt.Color(45, 54, 76));
        btnLimpiar.setkIndicatorColor(new java.awt.Color(45, 54, 76));
        btnLimpiar.setkIndicatorThickness(56);
        btnLimpiar.setkPressedColor(new java.awt.Color(45, 54, 76));
        btnLimpiar.setkStartColor(new java.awt.Color(45, 54, 76));
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });
        panelLeft.add(btnLimpiar, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 420, 60, 70));

        btnCopiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons8_heat_map_48px.png"))); // NOI18N
        btnCopiar.setToolTipText("Copiar");
        btnCopiar.setAlignmentY(0.0F);
        btnCopiar.setBorderPainted(false);
        butLat.add(btnCopiar);
        btnCopiar.setIconTextGap(5);
        btnCopiar.setkAllowGradient(false);
        btnCopiar.setkBackGroundColor(new java.awt.Color(45, 54, 76));
        btnCopiar.setkBorderRadius(90);
        btnCopiar.setkForeGround(new java.awt.Color(45, 54, 76));
        btnCopiar.setkHoverColor(new java.awt.Color(68, 81, 114));
        btnCopiar.setkIndicatorColor(new java.awt.Color(45, 54, 76));
        btnCopiar.setkIndicatorThickness(56);
        btnCopiar.setkPressedColor(new java.awt.Color(45, 54, 76));
        btnCopiar.setkStartColor(new java.awt.Color(45, 54, 76));
        btnCopiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCopiarActionPerformed(evt);
            }
        });
        panelLeft.add(btnCopiar, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 100, 60, 70));

        btnFondo.setBackground(new java.awt.Color(45, 54, 76));
        btnFondo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/fill_color_48px.png"))); // NOI18N
        btnFondo.setToolTipText("Color de fondo");
        btnFondo.setAlignmentY(0.0F);
        btnFondo.setBorderPainted(false);
        butLat.add(btnFondo);
        btnFondo.setIconTextGap(5);
        btnFondo.setkAllowGradient(false);
        btnFondo.setkBackGroundColor(new java.awt.Color(45, 54, 76));
        btnFondo.setkBorderRadius(90);
        btnFondo.setkEndColor(new java.awt.Color(45, 54, 76));
        btnFondo.setkForeGround(new java.awt.Color(45, 54, 76));
        btnFondo.setkHoverColor(new java.awt.Color(68, 81, 114));
        btnFondo.setkHoverEndColor(new java.awt.Color(45, 54, 76));
        btnFondo.setkHoverForeGround(new java.awt.Color(45, 54, 76));
        btnFondo.setkHoverStartColor(new java.awt.Color(45, 54, 76));
        btnFondo.setkIndicatorColor(new java.awt.Color(45, 54, 76));
        btnFondo.setkIndicatorThickness(56);
        btnFondo.setkPressedColor(new java.awt.Color(45, 54, 76));
        btnFondo.setkStartColor(new java.awt.Color(45, 54, 76));
        btnFondo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnFondoMouseReleased(evt);
            }
        });
        btnFondo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFondoActionPerformed(evt);
            }
        });
        panelLeft.add(btnFondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 260, 60, 70));

        btnBorrar.setBackground(new java.awt.Color(45, 54, 76));
        btnBorrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons8_broom_48px.png"))); // NOI18N
        btnBorrar.setToolTipText("Borrar");
        btnBorrar.setAlignmentY(0.0F);
        btnBorrar.setBorderPainted(false);
        btnBorrar.setIconTextGap(5);
        btnBorrar.setkAllowGradient(false);
        btnBorrar.setkBackGroundColor(new java.awt.Color(45, 54, 76));
        btnBorrar.setkBorderRadius(90);
        btnBorrar.setkEndColor(new java.awt.Color(45, 54, 76));
        btnBorrar.setkForeGround(new java.awt.Color(45, 54, 76));
        btnBorrar.setkHoverColor(new java.awt.Color(68, 81, 114));
        btnBorrar.setkHoverEndColor(new java.awt.Color(45, 54, 76));
        btnBorrar.setkHoverForeGround(new java.awt.Color(45, 54, 76));
        btnBorrar.setkHoverStartColor(new java.awt.Color(45, 54, 76));
        btnBorrar.setkIndicatorColor(new java.awt.Color(45, 54, 76));
        btnBorrar.setkIndicatorThickness(56);
        btnBorrar.setkPressedColor(new java.awt.Color(45, 54, 76));
        btnBorrar.setkStartColor(new java.awt.Color(45, 54, 76));
        btnBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarActionPerformed(evt);
            }
        });
        panelLeft.add(btnBorrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 340, 60, 70));

        btnTrazo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/paint_palette_26px.png"))); // NOI18N
        btnTrazo.setToolTipText("Color de trazo");
        btnTrazo.setAlignmentY(0.0F);
        btnTrazo.setBorderPainted(false);
        butLat.add(btnTrazo);
        btnTrazo.setIconTextGap(5);
        btnTrazo.setkAllowGradient(false);
        btnTrazo.setkBackGroundColor(new java.awt.Color(45, 54, 76));
        btnTrazo.setkBorderRadius(90);
        btnTrazo.setkForeGround(new java.awt.Color(45, 54, 76));
        btnTrazo.setkHoverColor(new java.awt.Color(68, 81, 114));
        btnTrazo.setkIndicatorColor(new java.awt.Color(45, 54, 76));
        btnTrazo.setkIndicatorThickness(56);
        btnTrazo.setkPressedColor(new java.awt.Color(45, 54, 76));
        btnTrazo.setkStartColor(new java.awt.Color(45, 54, 76));
        btnTrazo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTrazoActionPerformed(evt);
            }
        });
        panelLeft.add(btnTrazo, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 180, 60, 70));

        btnMover.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons8_collect_48px.png"))); // NOI18N
        btnMover.setToolTipText("Mover");
        btnMover.setAlignmentY(0.0F);
        btnMover.setBorderPainted(false);
        butLat.add(btnMover);
        btnMover.setIconTextGap(5);
        btnMover.setkAllowGradient(false);
        btnMover.setkBackGroundColor(new java.awt.Color(45, 54, 76));
        btnMover.setkBorderRadius(90);
        btnMover.setkForeGround(new java.awt.Color(45, 54, 76));
        btnMover.setkHoverColor(new java.awt.Color(68, 81, 114));
        btnMover.setkIndicatorColor(new java.awt.Color(45, 54, 76));
        btnMover.setkIndicatorThickness(56);
        btnMover.setkPressedColor(new java.awt.Color(45, 54, 76));
        btnMover.setkStartColor(new java.awt.Color(45, 54, 76));
        btnMover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoverActionPerformed(evt);
            }
        });
        panelLeft.add(btnMover, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, 60, 70));

        getContentPane().add(panelLeft, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 110, 130, 510));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtBKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBKeyTyped
        char c = evt.getKeyChar();
        if (Character.isLetter(c)) {
            evt.consume();
        }
        if (c == KeyEvent.VK_ENTER || c == KeyEvent.VK_TAB) {
            txtA.requestFocus();
        }


    }//GEN-LAST:event_txtBKeyTyped

    private void txtAKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAKeyTyped
        char c = evt.getKeyChar();
        if (Character.isLetter(c)) {
            evt.consume();
        }
        if (c == KeyEvent.VK_ENTER || c == KeyEvent.VK_TAB) {
            this.btnDibujar.doClick();
        }

    }//GEN-LAST:event_txtAKeyTyped


    private void btnDibujarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDibujarActionPerformed
        if (combo.getSelectedItem().equals("Parábola")) {
            if (!this.txtA.getText().isEmpty() && !this.txtB.getText().isEmpty()) {
                if (estadoLimpiar == false) {
                    caja1 = Integer.valueOf(txtB.getText());
                    caja2 = Integer.valueOf(txtA.getText());

                    linea(0, panel.getHeight() / 2, panel.getWidth(), panel.getHeight() / 2);
                    linea(panel.getWidth() / 2, 0, panel.getWidth() / 2, panel.getHeight());

                    // System.out.println("Ejecucion antes de parabola: " + ejecucion);
                    if (ejecucion == 0) {
                        h = panel.getWidth() / 2;
                        k = panel.getHeight() / 2;
                        //slidY = sliderPosY.getValue();

                    } else {
                        slidX = sliderPosX.getValue();
                        slidY = sliderPosY.getValue();
                        if (this.rbtVertical.isSelected()) {
                            //sliderPosY.setValue(panel.getHeight() / 2);
                            h = slidX;
                            //k = panel.getHeight() / 2;
                            k = this.sliderPosY.getMaximum() - slidY;
                            //caja1 = slidY;
                            slidY = caja1;
                            System.out.println("slidy> " + slidY);

                        } else {
                            h = slidX;
                            k = (this.sliderPosY.getMaximum() - slidY);
                        }
                    }
                    if (this.rbtVertical.isSelected() && caja2 >= 0 && caja1 >= 0) {// SI ES VERTICAL
                        limX = h;
                        lim = k + 1000;
                        calcularParabola();
                        parabola(h, k - caja1, p + (int) Math.sqrt(caja2), op, oa, lim);

                    } else if (this.rbtVertical.isSelected() && caja2 < 0 && caja1 >= 0) {

                        limX = h;
                        lim = 0;
                        calcularParabola();
                        parabola(h, k - caja1, p + (int) Math.sqrt(-1 * caja2), op, oa, lim);

                    } else if (this.rbtVertical.isSelected() && caja2 < 0 && caja1 < 0) {

                        limX = h;
                        lim = 1000;
                        calcularParabola();
                        parabola(h, k - caja1, p + (int) Math.sqrt(-1 * caja2), op, oa, lim);
                    } else if (this.rbtVertical.isSelected() && caja2 >= 0 && caja1 < 0) {

                        limX = h;
                        lim = 0;
                        calcularParabola();
                        parabola(h, k - caja1, p + (int) Math.sqrt(caja2), op, oa, lim);
                    } else if (this.rbtHorizontal.isSelected() && caja2 >= 0 && caja1 >= 0) {//SI ES HORIZONTAL
                        limX = 0;
                        lim = k;
                        calcularParabola();
                        parabola(h + caja2, k, p + (int) Math.sqrt(caja1), op, oa, lim);

                    } else if (this.rbtHorizontal.isSelected() && caja2 < 0 && caja1 >= 0) {

                        limX = 1000;
                        lim = k;
                        calcularParabola();
                        parabola(h + caja2, k, p + (int) Math.sqrt(caja1), op, oa, lim);

                    } else if (this.rbtHorizontal.isSelected() && caja2 < 0 && caja1 < 0) {

                        limX = 0;
                        lim = k;
                        calcularParabola();
                        parabola(h + caja2, k, p + (int) Math.sqrt(-1 * caja1), op, oa, lim);

                    } else if (this.rbtHorizontal.isSelected() && caja2 >= 0 && caja1 < 0) {

                        limX = 1000;
                        lim = k;
                        calcularParabola();
                        parabola(h + caja2, k, p + (int) Math.sqrt(-1 * caja1), op, oa, lim);

                    }
                    ejecucion++;
                } else {
                    alertaArea();
                }
            } else {
                alertaVacio();
            }

        } else {
            if (combo.getSelectedItem().equals("Círculo") || combo.getSelectedItem().equals("Elipse")) {

                if (!this.txtA.getText().isEmpty()) {
                    if (estadoLimpiar == false) {
                        //String radio1 = this.txtA.getText();
                        //String radio2 = this.txtB.getText();

                        //if (!radio1.isEmpty() && !radio2.isEmpty()) {
                        //Ubicando ejes cartesianos
                        linea(0, panel.getHeight() / 2, panel.getWidth(), panel.getHeight() / 2);
                        linea(panel.getWidth() / 2, 0, panel.getWidth() / 2, panel.getHeight());
                        //System.out.println("ejecucion en circulo: " + ejecucion);

                        if (ejecucion == 0) {
                            radio1 = this.txtA.getText();
                            radio2 = this.txtB.getText();
                            slidX = panel.getWidth() / 2;
                            slidY = panel.getHeight() / 2;
                            sliderRadio1.setValue(Integer.parseInt(radio1));
                            sliderRadio1.setMaximum(Integer.parseInt(radio1) * 5);
                            sliderRadio1.setMinimum(Integer.parseInt(radio1));
                            if (this.combo.getSelectedIndex() == 1) {//CIRCULO
                                radio2 = radio1;

                                sliderRadio2.setValue(Integer.parseInt(radio1));
                                sliderRadio2.setMaximum(Integer.parseInt(radio1) * 4);
                                sliderRadio2.setMinimum(Integer.parseInt(radio1));
                            } else {
                                if (this.combo.getSelectedIndex() == 2) {//ELIPSE

                                    sliderRadio2.setValue(Integer.parseInt(radio2));
                                    sliderRadio2.setMaximum(Integer.parseInt(radio2) * 4);
                                    sliderRadio2.setMinimum(Integer.parseInt(radio2));
                                }
                            }
                        } else {

                            slidX = sliderPosX.getValue(); //* 6;
                            slidY = (sliderPosY.getMaximum() - sliderPosY.getValue()); //* 3;

                            if (this.combo.getSelectedIndex() == 1) {
                                radio1 = String.valueOf(this.sliderRadio1.getValue());
                                radio2 = radio1;
                            } else {
                                if (this.combo.getSelectedIndex() == 2) {
                                    radio1 = String.valueOf(this.sliderRadio1.getValue());
                                    radio2 = String.valueOf(this.sliderRadio2.getValue());
                                }
                            }
                        }

                        elipseX1 = Integer.valueOf(radio1) + slidX;
                        elipseY1 = Integer.valueOf(radio2) + slidY;//panel.getHeight() / 2;
                        elipseX2 = -Integer.valueOf(radio1) + slidX;//panel.getWidth() / 2;
                        elipseY2 = -Integer.valueOf(radio2) + slidY;//panel.getHeight() / 2;

                        if (this.rbtHorizontal.isSelected()) {//ELIPSE HORIZONTAL
                            elipseX1 = Integer.valueOf(radio2) + slidX;//panel.getWidth() / 2;
                            elipseY1 = Integer.valueOf(radio1) + slidY;//panel.getHeight() / 2;
                            elipseX2 = -Integer.valueOf(radio2) + slidX;//panel.getWidth() / 2;
                            elipseY2 = -Integer.valueOf(radio1) + slidY;//panel.getHeight() / 2;
                        }

                        if (this.combo.getSelectedIndex() == 2 && Integer.valueOf(radio1) >= 0 && Integer.valueOf(radio2) < 0) {
                            this.rbtVertical.setEnabled(false);
                            this.rbtHorizontal.setEnabled(false);
                            this.rbtHorizontal.setSelected(true);
                            //dinamico = 1;
                            this.sliderRadio1.setVisible(true);
                            this.sliderRadio2.setVisible(false);
                            if (ejecucion == 0) {
                                h = panel.getWidth() / 2;
                                k = panel.getHeight() / 2;
                            } else {
                                slidX = sliderPosX.getValue();
                                slidY = sliderPosY.getValue();
                                if (this.combo.getSelectedIndex() == 2) {
                                    //if (this.rbtVertical.isSelected()) {
                                    h = slidX;
                                    k = this.sliderPosY.getMaximum() - slidY;
                                    slidY = caja1;

                                    /*} else {
                                        h = slidX;
                                        k = (this.sliderPosY.getMaximum() - slidY);

                                    }*/
                                }
                            }
                            limX = 0;
                            lim = k;
                            calcularParabola();
                            parabola(h - Integer.valueOf(radio1), k, p + (int) (Integer.valueOf(radio2) * -5), op, oa, lim);

                            limX = 10000;
                            lim = k;
                            calcularParabola();
                            parabola(h + Integer.valueOf(radio1), k, p + (int) (Integer.valueOf(radio2) * -5), op, oa, lim);
                            //ejecucion++;
                            ejecucion++;
                        }

                        if (this.combo.getSelectedIndex() == 2 && Integer.valueOf(radio1) < 0 && Integer.valueOf(radio2) >= 0) {
                            //dinamico = 1;
                            this.rbtVertical.setEnabled(false);
                            this.rbtHorizontal.setEnabled(false);
                            this.rbtVertical.setSelected(true);
                            this.sliderRadio2.setVisible(true);
                            this.sliderRadio1.setVisible(false);
                            if (ejecucion == 0) {
                                h = panel.getWidth() / 2;
                                k = panel.getHeight() / 2;
                            } else {
                                slidX = sliderPosX.getValue();
                                slidY = sliderPosY.getValue();
                                //if (this.combo.getSelectedIndex() == 2) {
                                //if (this.rbtVertical.isSelected()) {
                                h = slidX;
                                k = this.sliderPosY.getMaximum() - slidY;
                                slidY = caja1;

                                /*} else if (this.rbtHorizontal.isSelected()) {
                                        h = slidX;
                                        k = (this.sliderPosY.getMaximum() - slidY);

                                    }
                                }*/
                            }
                            limX = h;
                            lim = k + 1000;
                            calcularParabola();
                            parabola(h + Integer.valueOf(radio2), k, p + (int) (Integer.valueOf(radio1) * -5), op, oa, lim);

                            limX = h;
                            lim = 0;
                            calcularParabola();
                            parabola(h - Integer.valueOf(radio2), k, p + (int) (Integer.valueOf(radio1) * -5), op, oa, lim);
                            //ejecucion++;
                            ejecucion++;
                        }

                        if (combo.getSelectedIndex() == 1 && Integer.valueOf(radio1) >= 0 && Integer.valueOf(radio2) >= 0) {
                            dinamico = 0;
                            calculosElipse();
                            // ejecucion++;
                            ejecucion++;
                        }

                        if (combo.getSelectedIndex() == 2 && Integer.valueOf(radio1) >= 0 && Integer.valueOf(radio2) >= 0) {
                            dinamico = 0;
                            calculosElipse();
                            // ejecucion++;
                            ejecucion++;
                        }

                        if (Integer.valueOf(radio1) < 0 && Integer.valueOf(radio2) < 0) {
                            JOptionPane.showMessageDialog(null, "Datos inválidos");
                            limpieza();
                        }

                    } else {
                        alertaArea();
                    }
    }//GEN-LAST:event_btnDibujarActionPerformed
            else {
                    alertaVacio();
                }

            } else {
                if (combo.getSelectedItem().equals("Línea")) {

                    if (!this.txtA.getText().isEmpty() && !this.txtB.getText().isEmpty()) {
                        if (estadoLimpiar == false) {
                            linea(0, panel.getHeight() / 2, panel.getWidth(), panel.getHeight() / 2);
                            linea(panel.getWidth() / 2, 0, panel.getWidth() / 2, panel.getHeight());
                            if (ejecucion == 0) {
                                radio1 = this.txtA.getText();
                                radio2 = this.txtB.getText();
                                slidX = panel.getWidth() / 2;
                                slidY = panel.getHeight() / 2;
                                linea2(slidX, Integer.parseInt(radio1), Integer.parseInt(radio2), slidY);
                                sliderRadio1.setValue(Integer.parseInt(radio1));
                                sliderRadio1.setMaximum(Integer.parseInt(radio1) * 4);
                                sliderRadio1.setValue(Integer.parseInt(radio2));
                                sliderRadio1.setMaximum(Integer.parseInt(radio2) * 4);
                                //sliderPosY.setValue(radio1);
                            } else {

                                slidX = sliderPosX.getValue(); //* 6;
                                slidY = (sliderPosY.getMaximum() - sliderPosY.getValue()); //* 3;
                                radio1 = String.valueOf(sliderRadio1.getValue());
                                radio2 = String.valueOf(sliderRadio2.getValue());
                            }
                            //lin++;
                            //linea(panel.getWidth() / 2, slidY, slidX, panel.getHeight() / 2);
                            linea2(slidX, Integer.parseInt(radio1), Integer.parseInt(radio2), slidY);
                            ejecucion++;
                        } else {
                            alertaArea();
                        }

                    } else {
                        alertaVacio();
                    }
                }
            }

        }

    }

    public void alertaArea() {
        JOptionPane.showMessageDialog(null, "Limpia el área",
                "", JOptionPane.PLAIN_MESSAGE, icono("/images/escoba.png", 70, 70));
    }

    public void alertaVacio() {
        JOptionPane.showMessageDialog(null, "Campos vacíos",
                "", JOptionPane.PLAIN_MESSAGE, icono("/images/vacio.png", 70, 70));
    }

    private Icon icono(String path, int width, int heigth) {
        Icon img = new ImageIcon(new ImageIcon(getClass().getResource(path)).getImage()
                .getScaledInstance(width, heigth, java.awt.Image.SCALE_SMOOTH));
        return img;
    }

    private void calculosElipse() {
        float a, b;
        int c, d;
        c = (elipseX1 + elipseX2) / 2;
        d = (elipseY1 + elipseY2) / 2;
        a = (float) Math.sqrt(Math.pow(elipseX1 - elipseX2, 2)) / 2;
        b = (float) Math.sqrt(Math.pow(elipseY1 - elipseY2, 2)) / 2;
        elipse(c, d, a, b);

    }

    public void elipse(int c, int d, float a, float b) {
        sliderSecciones.setMinimum(120);
        sliderSecciones.setMaximum(300);
        int limitee = this.sliderSecciones.getValue();
        float y, x;
        y = d - b;
        do {
            x = (float) (a * Math.sqrt(1 - Math.pow(y - d, 2) / Math.pow(b, 2)) + c);
            pintar_pixel(Math.round(x), Math.round(y));//Pinta lado izquierdo
            relleno.iniciales(Math.round(x), Math.round(y));//puntos iniciales
            x = (float) (-a * Math.sqrt(1 - Math.pow(y - d, 2) / Math.pow(b, 2)) + c);
            pintar_pixel(Math.round(x), Math.round(y));//pinta lado derecho
            relleno.finales(Math.round(x), Math.round(y));//puntos finales
            y++;
            if (rbtSi.isSelected()) {//para rellenar la figura
                rellenar();
            }
//        } while (y < d + b);
        } while (y < limitee);

        x = c - a;
//        while (x < c + a) {
        while (x < limitee) {
            y = (float) (b * Math.sqrt(1 - Math.pow(x - c, 2) / Math.pow(a, 2)) + d);
            pintar_pixel(Math.round(x), Math.round(y));
            relleno.iniciales(Math.round(x), Math.round(y));//puntos iniciales
            y = (float) (-b * Math.sqrt(1 - Math.pow(x - c, 2) / Math.pow(a, 2)) + d);
            pintar_pixel(Math.round(x), Math.round(y));
            relleno.finales(Math.round(x), Math.round(y));//puntos finales
            x++;
            if (rbtSi.isSelected()) {//para rellenar la figura
                rellenar();
            }
        }
    }

    //Parábola
    private void rbtHorizontalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtHorizontalActionPerformed
        if (combo.getSelectedIndex() == 0 && this.rbtHorizontal.isSelected()) {
            this.lbl1.setText("Cruce en eje:");
            this.lbl5.setText("Vértice:");
        }
    }//GEN-LAST:event_rbtHorizontalActionPerformed

    private void rbtVerticalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtVerticalActionPerformed
        if (combo.getSelectedIndex() == 0 && this.rbtVertical.isSelected()) {
            this.lbl1.setText("Vértice:");
            this.lbl5.setText("Cruce en eje:");// TODO add your handling code here:
        }
    }//GEN-LAST:event_rbtVerticalActionPerformed

    private void sliderPosYStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderPosYStateChanged
    }//GEN-LAST:event_sliderPosYStateChanged

    private void sliderPosYMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sliderPosYMousePressed
        panel.repaint();
    }//GEN-LAST:event_sliderPosYMousePressed

    private void sliderPosYMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sliderPosYMouseClicked
    }//GEN-LAST:event_sliderPosYMouseClicked

    private void sliderPosYMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sliderPosYMouseReleased
        //panel.repaint();
        estadoLimpiar = false;
        btnDibujar.doClick();
    }//GEN-LAST:event_sliderPosYMouseReleased

    private void sliderPosYMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sliderPosYMouseDragged
        // TODO add your handling code here:
        // panel.repaint();
    }//GEN-LAST:event_sliderPosYMouseDragged

    private void sliderPosXStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderPosXStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_sliderPosXStateChanged

    private void sliderPosXMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sliderPosXMouseDragged
        // TODO add your handling code here:
    }//GEN-LAST:event_sliderPosXMouseDragged

    private void sliderPosXMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sliderPosXMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_sliderPosXMouseClicked

    private void sliderPosXMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sliderPosXMousePressed
        panel.repaint();
    }//GEN-LAST:event_sliderPosXMousePressed

    private void sliderPosXMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sliderPosXMouseReleased
        // TODO add your handling code here:
        estadoLimpiar = false;
        btnDibujar.doClick();
    }//GEN-LAST:event_sliderPosXMouseReleased

    private void comboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboItemStateChanged
        if (this.combo.getSelectedIndex() == 0) {
            this.rbtHorizontal.setSelected(true);
            limpieza();
            opcionesParabola();
    }//GEN-LAST:event_comboItemStateChanged
    else if (this.combo.getSelectedIndex() == 1) {
            limpieza();
            opcionesCirculo();

        } else if (this.combo.getSelectedIndex() == 2) {
            limpieza();
            opcionesElipse();

        } else if (this.combo.getSelectedIndex() == 3) {
            //panel.repaint();
            //panel.repaint();
            limpieza();
            opcionesLinea();
            //this.btnDibujar.doClick();
        }
    }


    private void sliderRadio1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sliderRadio1MouseReleased
        // TODO add your handling code here:
        estadoLimpiar = false;
        btnDibujar.doClick();

    }//GEN-LAST:event_sliderRadio1MouseReleased

    private void sliderRadio1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sliderRadio1MousePressed
        // TODO add your handling code here:
        panel.repaint();
    }//GEN-LAST:event_sliderRadio1MousePressed

    private void sliderRadio2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sliderRadio2MousePressed
        // TODO add your handling code here:
        panel.repaint();
    }//GEN-LAST:event_sliderRadio2MousePressed

    private void sliderRadio2MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sliderRadio2MouseReleased
        // TODO add your handling code here:
        estadoLimpiar = false;
        btnDibujar.doClick();
    }//GEN-LAST:event_sliderRadio2MouseReleased

    private void comboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboActionPerformed

    private void sliderSeccionesMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sliderSeccionesMousePressed
        panel.repaint();
    }//GEN-LAST:event_sliderSeccionesMousePressed

    private void sliderSeccionesMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sliderSeccionesMouseReleased
        estadoLimpiar = false;
        btnDibujar.doClick();
    }//GEN-LAST:event_sliderSeccionesMouseReleased

    private void rbtSiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtSiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbtSiActionPerformed

    private void rbtNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtNoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbtNoActionPerformed

    private void txtBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        iconSel = "limpiezaColgate"; //Por ser una limpieza total
        Cursor(iconSel);
        limpieza();

    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnCopiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCopiarActionPerformed
        iconSel = "copiar";
        Cursor(iconSel);

    }//GEN-LAST:event_btnCopiarActionPerformed

    private void btnFondoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFondoActionPerformed
        iconSel = "vetanaColor";
        Cursor(iconSel);
        color2 = ventanColor.showDialog(null, "Selecciona un color", color2);
        //this.panel.setBackground(color2);
        /* estadoLimpiar=true;
        limpieza();*/


    }//GEN-LAST:event_btnFondoActionPerformed

    private void btnBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarActionPerformed
        iconSel = "borrador";
        Cursor(iconSel);
    }//GEN-LAST:event_btnBorrarActionPerformed

    public void Cursor(String iconoSe) {
        Cursor cursor;
        ImageIcon icon;
        if (iconoSe.equals("borrador")) {
            icon = new ImageIcon(getClass().getResource("/images/icons8_broom_48px.png"));

            Toolkit t = Toolkit.getDefaultToolkit();
            cursor = t.createCustomCursor(icon.getImage(), new Point(10, 31), "cursor");
            panel.setCursor(cursor);
        } else {

            panel.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));

        }

    }


    private void btnTrazoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTrazoActionPerformed
        iconSel = "trazoColor";
        Cursor(iconSel);
        System.out.println(iconSel);
        color1 = ventanColor.showDialog(null, "Selecciona un color", color1);
        estadoLimpiar = true;
        limpieza();
        //this.btnDibujar.getAction();*/


    }//GEN-LAST:event_btnTrazoActionPerformed

    private void btnMoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoverActionPerformed
        iconSel = "mover";
        Cursor(iconSel);
    }//GEN-LAST:event_btnMoverActionPerformed


    private void btnFondoMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnFondoMouseReleased
        // TODO add your handling code here:

        this.panel.setBackground(color2);
        this.panelFig.setBackground(color2);
        estadoLimpiar = false;
        limpieza();
    }//GEN-LAST:event_btnFondoMouseReleased

    private void panelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelMousePressed
        if (iconSel.equals("borrador")) {

            borrarx = evt.getX();
            borrary = evt.getY();
            pintar_pixel(borrarx, borrary, color2);
        }
    }//GEN-LAST:event_panelMousePressed

    private void panelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelMouseDragged
        if (iconSel.equals("borrador")) {
            borrarx = evt.getX();
            borrary = evt.getY();
            pintar_pixel(borrarx, borrary, color2);
        }
    }//GEN-LAST:event_panelMouseDragged

    public void pintar_pixel(int x, int y, Color colo) {

        Graphics g = panel.getGraphics();
        g.setColor(colo);
        g.fillRect(x, y, grosor, grosor);

    }

    public void opcionesParabola() {
        lblTitulo.setText("Parábola");
        this.rbtHorizontal.setVisible(true);
        this.rbtVertical.setVisible(true);
        this.rbtHorizontal.setEnabled(true);
        this.rbtVertical.setEnabled(true);
        this.rbtHorizontal.setSelected(true);
        this.lbl1.setVisible(true);
        this.lbl5.setVisible(true);
        lbl1.setText("Cruce en eje:");
        lbl5.setText("Vértice:");
        lblOrientación.setVisible(true);
        this.txtB.setVisible(true);
        this.txtA.setVisible(true);
        this.txtA.setText("");
        this.txtB.setText("");
        this.sliderRadio1.setVisible(false);
        this.sliderRadio2.setVisible(false);
        lblZoom.setVisible(false);

    }

    public void opcionesCirculo() {
        lblTitulo.setText("Círculo");
        this.txtB.setVisible(false);
        this.txtB.setText("");
        this.txtA.setText("");
        this.txtA.setVisible(true);
        this.lblOrientación.setVisible(false);
        this.lbl1.setVisible(false);
        this.lbl5.setVisible(true);
        this.lbl5.setText("Radio:");
        this.rbtHorizontal.setVisible(false);
        this.rbtVertical.setVisible(false);
        this.sliderRadio1.setVisible(true);
        this.sliderRadio2.setVisible(false);
        this.sliderRadio1.setValue(50);
        lblZoom.setVisible(true);
        lblZoom.setText("Zoom");

    }

    public void opcionesElipse() {
        lblTitulo.setText("Elipse");
        this.txtB.setVisible(true);
        this.txtB.setText("");
        this.txtA.setVisible(true);
        this.lblOrientación.setVisible(true);
        this.txtA.setText("");
        this.lbl1.setVisible(true);
        this.lbl5.setVisible(true);
        this.lbl5.setText("Radio 2:");
        this.lbl1.setText("Radio 1:");
        this.rbtHorizontal.setVisible(true);
        this.rbtVertical.setVisible(true);

        this.sliderRadio1.setVisible(true);
        this.sliderRadio2.setVisible(true);
        sliderRadio1.setValue(50);
        sliderRadio2.setValue(50);
        lblZoom.setVisible(true);
        lblZoom.setText("Zoom");

        //sliderRadio2.setLocation(xp, yp);
    }

    public void opcionesLinea() {
        lblTitulo.setText("Línea");
        this.txtB.setVisible(true);
        this.txtB.setText("");
        this.txtA.setVisible(true);
        this.txtA.setText("");
        this.lblOrientación.setVisible(false);
        this.lbl1.setVisible(true);
        this.lbl5.setVisible(true);
        this.lbl5.setText("Valor de B:");
        this.lbl1.setText("Valor de A:");
        this.rbtHorizontal.setVisible(false);
        this.rbtVertical.setVisible(false);
        this.sliderRadio1.setVisible(true);
        this.sliderRadio2.setVisible(true);
        lblZoom.setVisible(true);
        lblZoom.setText("Inclinación:");

    }

    private void calcularParabola() {

        if (Math.sqrt(Math.pow(h - limX, 2)) > Math.sqrt(Math.pow(k - lim, 2))) {
            op = 1;
            lim = limX;
            if (limX >= h) {
                oa = 0;
            } else {
                oa = 1;
            }
        } else {
            op = 0;
            if (lim >= k) {
                oa = 0;
            } else {
                oa = 1;
            }

        }
    }

    public void parabola(int h, int k, int p, int op, int oa, int lim) {
        float x, y;
        if (oa == 1.0) {
            p = -p;
//            lim = -lim;
            /**
             * ****************************************
             */
            this.sliderSecciones.setMinimum(-1016);
            this.sliderSecciones.setMaximum(sliderPosX.getValue());
            lim = this.sliderSecciones.getValue();
            /**
             * *********************************************************************************
             */
        } else {
            /**
             * ****************************************
             */
            this.sliderSecciones.setMinimum(-1400);
            this.sliderSecciones.setMaximum(1186);//1186
            lim = this.sliderSecciones.getValue() + 668;//520+668 = 1186
            /**
             * ****************************************
             */
        }
        if (op == 1.0) {
            y = h;
            x = k;
            h = k;
            k = (int) y;
        } else {
            y = k;
            x = h;
        }
        do {

            x = x + 1;
            y = (float) (Math.pow(x - h, 2) / p + k);
            y = (int) y;

            if (op == 0) {
                pintar_pixel(Math.round(x), Math.round(y));// dibuja parte abajo
                relleno.iniciales(Math.round(x), Math.round(y));//puntos iniciales
                pintar_pixel(Math.round(h - (x - h)), Math.round(y));//dibuja parte arriba
                relleno.finales(Math.round(h - (x - h)), Math.round(y));//puntos finales
            } else {
                pintar_pixel(Math.round(y), Math.round(x));//dibuja la parte de abajo
                relleno.iniciales(Math.round(y), Math.round(x));//puntos iniciales
                pintar_pixel(Math.round(y), Math.round(h - (x - h)));//dibuja parte de arriba
                relleno.finales(Math.round(y), Math.round(h - (x - h)));//puntos finales
            }

            if (oa == 1.0) {
                y = -y;
            }
//            if (rbtSi.isSelected()) {//para rellenar la figura
//                rellenar();
//            }
        } while (y < lim);

        lim = Math.round(y);
        y = k;
        boolean b = false;
        do {
            if (p < 0) {
                if (b) {
                    y = -y;
                    b = false;
                }
                y = y - 1;
            } else {
                y = y + 1;
            }
            x = (float) (Math.sqrt(p * (y - k)) + h);
            x = (int) x;
            if (op == 0) {
                pintar_pixel(Math.round(x), Math.round(y));//pinta linea de arriba
                relleno.finales(Math.round(x), Math.round(y));//puntos finales
            } else {
                pintar_pixel(Math.round(y), Math.round(x));//pinta linea de abajo
                relleno.iniciales(Math.round(y), Math.round(x));//puntos iniciales
            }

            x = (float) (-1 * Math.sqrt(p * (y - k)) + h);
            x = (int) x;
            if (op == 0) {
                pintar_pixel(Math.round(x), Math.round(y));//pinta linea de  abajo
                relleno.iniciales(Math.round(x), Math.round(y));//puntos iniciales
            } else {
                pintar_pixel(Math.round(y), Math.round(x));//pinta linea de arriba
                relleno.finales(Math.round(y), Math.round(x));//puntos finales
            }
            if (oa == 1.0) {
                y = -y;
                b = true;
            }
            if (rbtSi.isSelected()) {//para rellenar la figura
                rellenar();
            }
        } while (y <= lim);
    }

    public void pintar_pixel(int x, int y) {

        Graphics g = panel.getGraphics();
        g.setColor(color1);
        g.fillRect(x, y, 2, 2);

    }

    public void rellenar() {
        Relleno r = relleno;
        Graphics g = panel.getGraphics();
        g.setColor(color1);
        g.drawLine(r.getX(), r.getY(), r.getX2(), r.getY2());
    }

    public void linea(int xInicial, int yInicial, int xFinal, int yFinal) {

        DeltaX = xFinal - xInicial;
        DeltaY = yFinal - yInicial;

        if (Math.abs(DeltaX) > Math.abs(DeltaY)) {
            Pasos = (int) Math.abs(DeltaX);
        } else {
            Pasos = (int) Math.abs(DeltaY);
        }

        Xincremento = DeltaX / Pasos;
        Yincremento = DeltaY / Pasos;

        X = (float) xInicial;
        Y = (float) yInicial;

        xp = (int) X;
        yp = (int) Y;

        pintar_pixel(xp, yp);

        xp = 0;
        yp = 0;

        K = 0;

        while (K < Pasos) {
            K = K + 1;
            X = X + Xincremento;
            Y = Y + Yincremento;

            xp = Math.round(X);
            yp = Math.round(Y);

            pintar_pixel(xp, yp);

            xp = 0;
            yp = 0;
        }

        //System.out.println("ejecucion al final de paint: " + ejecucion);
        if (mensaje == 0) {
            JOptionPane.showMessageDialog(null, "Mueva con el mouse",
                "", JOptionPane.PLAIN_MESSAGE, icono("/images/hand.png", 70, 70));
        }
        mensaje++;
        sliderPosX.enable(true);
        sliderPosY.enable(true);
        estadoLimpiar = true;
    }

    public void linea2(int xInicial, int yInicial, int xFinal, int yFinal) {
        DeltaX = xFinal - xInicial;
        DeltaY = yFinal - yInicial;

        if (Math.abs(DeltaX) > Math.abs(DeltaY)) {
            Pasos = (int) Math.abs(DeltaX);

        } else {
            Pasos = (int) Math.abs(DeltaY);

        }

        Xincremento = DeltaX / Pasos;
        Yincremento = DeltaY / Pasos;

        X = (float) xInicial;
        Y = (float) yInicial;

        xp = (int) X;
        yp = (int) Y;

        pintar_pixel(xp, yp);

        xp = 0;
        yp = 0;

        K = 0;

        this.sliderSecciones.setMinimum(0);
        this.sliderSecciones.setMaximum(Pasos);

        while (K < this.sliderSecciones.getValue()) {
            K = K + 1;
            X = X + Xincremento;
            Y = Y + Yincremento;

            xp = Math.round(X);
            yp = Math.round(Y);

            pintar_pixel(xp, yp);

            xp = 0;
            yp = 0;
        }

        mensaje++;
        sliderPosX.enable(true);
        sliderPosY.enable(true);
        estadoLimpiar = true;
    }

    public void limpieza() {
        if (estadoLimpiar == true) {
            panel.removeAll();
            panel.repaint();
        }
        estadoLimpiar = false;
        ejecucion = 0;
        sliderPosX.disable();
        sliderPosY.disable();
        sliderPosX.setValue(panel.getWidth() / 2);
        sliderPosY.setValue(panel.getHeight() / 2);
        this.rbtVertical.setEnabled(true);
        this.rbtHorizontal.setEnabled(true);

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private keeptoo.KButton btnBorrar;
    private keeptoo.KButton btnCopiar;
    private principal.MaterialButtomRectangle btnDibujar;
    private keeptoo.KButton btnFondo;
    private keeptoo.KButton btnLimpiar;
    private keeptoo.KButton btnMover;
    private keeptoo.KButton btnTrazo;
    private javax.swing.ButtonGroup butLat;
    private javax.swing.ButtonGroup butOrientacion;
    private javax.swing.ButtonGroup butRellenar;
    private javax.swing.JComboBox<String> combo;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel lbl1;
    private javax.swing.JLabel lbl5;
    private javax.swing.JLabel lblOrientación;
    private javax.swing.JLabel lblOrientación1;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JLabel lblZoom;
    private javax.swing.JLabel lblZoom1;
    private javax.swing.JPanel panel;
    private javax.swing.JPanel panelFig;
    private javax.swing.JPanel panelLeft;
    private javax.swing.JPanel paneldd;
    private javax.swing.JRadioButton rbtHorizontal;
    private javax.swing.JRadioButton rbtNo;
    private javax.swing.JRadioButton rbtSi;
    private javax.swing.JRadioButton rbtVertical;
    private javax.swing.JSlider sliderPosX;
    private javax.swing.JSlider sliderPosY;
    private javax.swing.JSlider sliderRadio1;
    private javax.swing.JSlider sliderRadio2;
    private javax.swing.JSlider sliderSecciones;
    private jtextfieldround.JTextFieldRound txtA;
    private jtextfieldround.JTextFieldRound txtB;
    // End of variables declaration//GEN-END:variables
}
